--expensesDb

-- ============= Direcciones =============

CREATE TABLE AddressEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    street TEXT,
    number TEXT,
    neighborhood TEXT,
    zip TEXT,
    city TEXT,
    state TEXT,
    country TEXT
);

-- ============= Roles y Usuarios =============

CREATE TABLE RoleEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

roleSelectById:
SELECT * FROM RoleEntity WHERE id = ?;

roleUpdate:
UPDATE RoleEntity SET name = ?, description = ? WHERE id = ?;

roleCount:
SELECT COUNT(*) FROM RoleEntity;

roleCreate:
INSERT INTO RoleEntity (name, description) VALUES (?, ?);

roleSelectAll:
SELECT * FROM RoleEntity;

roleDelete:
DELETE FROM RoleEntity WHERE id = ?;

-- Usuarios (solo login)
CREATE TABLE UserEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL
);

userCreate:
INSERT INTO UserEntity (username, password_hash, active, created_at, updated_at)
VALUES (?, ?, ?, ?, ?);

selectUserById:
SELECT * FROM UserEntity WHERE id = ?;

selectUserByUsername:
SELECT * FROM UserEntity WHERE username = ?;

userActivate:
UPDATE UserEntity SET active = 1, updated_at = ? WHERE id = ?;

userDeactivate:
UPDATE UserEntity SET active = 0, updated_at = ? WHERE id = ?;

-- ============= Franquicias =============

CREATE TABLE FranchiseEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    email TEXT,
    phone TEXT,
    base_price_cents INTEGER NOT NULL DEFAULT 0 CHECK (base_price_cents >= 0),
    currency TEXT NOT NULL DEFAULT 'MXN',
    tax_name TEXT,
    tax_id TEXT,
    zone TEXT,
    is_new INTEGER NOT NULL DEFAULT 0 CHECK (is_new IN (0,1)),
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    address_id INTEGER REFERENCES AddressEntity(id) ON DELETE SET NULL
);

franchiseCreate:
INSERT INTO FranchiseEntity (name, email, phone, base_price_cents, currency, tax_name, tax_id, zone, is_new, active, address_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

franchiseSelectAll:
SELECT * FROM FranchiseEntity;

franchiseDelete:
DELETE FROM FranchiseEntity WHERE id = ?;

-- Multirol por franquicia
CREATE TABLE UserRoleEntity (
    user_id INTEGER NOT NULL REFERENCES UserEntity(id) ON DELETE CASCADE,
    role_id INTEGER NOT NULL REFERENCES RoleEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id, franchise_id)
);

userRoleAssign:
INSERT INTO UserRoleEntity (user_id, role_id, franchise_id) VALUES (?, ?, ?);

userRolesByUser:
SELECT ur.*, r.name AS role_name
FROM UserRoleEntity ur
JOIN RoleEntity r ON r.id = ur.role_id
WHERE ur.user_id = ?;

-- ============= CatÃ¡logos de Niveles y Disciplinas =============

CREATE TABLE LevelEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

levelCreate:
INSERT INTO LevelEntity (name) VALUES (?);

levelSelectAll:
SELECT * FROM LevelEntity;

CREATE TABLE DisciplineEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    level_id INTEGER NOT NULL REFERENCES LevelEntity(id) ON DELETE RESTRICT,
    UNIQUE(name, level_id)
);

disciplineCreate:
INSERT INTO DisciplineEntity (name, level_id) VALUES (?, ?);

disciplineSelectAll:
SELECT d.id, d.name, d.level_id, l.name AS level_name
FROM DisciplineEntity d
JOIN LevelEntity l ON l.id = d.level_id;

-- Disciplinas habilitadas en franquicia
CREATE TABLE FranchiseDisciplineEntity (
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    discipline_id INTEGER NOT NULL REFERENCES DisciplineEntity(id) ON DELETE RESTRICT,
    PRIMARY KEY (franchise_id, discipline_id)
);

franchiseDisciplineCreate:
INSERT INTO FranchiseDisciplineEntity (franchise_id, discipline_id) VALUES (?, ?);

franchiseDisciplineByFranchise:
SELECT fd.*, d.name AS discipline_name
FROM FranchiseDisciplineEntity fd
JOIN DisciplineEntity d ON d.id = fd.discipline_id
WHERE fd.franchise_id = ?;

-- ============= Personal: Profesores y Administrativos =============

CREATE TABLE TeacherEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE REFERENCES UserEntity(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    phone TEXT,
    email TEXT,
    rfc TEXT,
    start_ts INTEGER,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    vetoed INTEGER NOT NULL DEFAULT 0 CHECK (vetoed IN (0,1))
);

teacherCreate:
INSERT INTO TeacherEntity (user_id, first_name, last_name_paternal, last_name_maternal, phone, email, rfc, start_ts, active, vetoed)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

teacherSelectById:
SELECT * FROM TeacherEntity WHERE id = ?;

CREATE TABLE FranchiseTeacherEntity (
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    PRIMARY KEY (franchise_id, teacher_id)
);

insertFranchiseTeacher:
INSERT INTO FranchiseTeacherEntity (franchise_id, teacher_id) VALUES (?, ?);

CREATE TABLE TeacherHourlyRateEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    rate_cents INTEGER NOT NULL,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    created_ts INTEGER NOT NULL
);

insertTeacherHourlyRate:
INSERT INTO TeacherHourlyRateEntity (teacher_id, franchise_id, rate_cents, active, created_ts)
VALUES (?, ?, ?, ?, ?);

getActiveHourlyRateByTeacher:
SELECT * FROM TeacherHourlyRateEntity
WHERE teacher_id = ? AND franchise_id = ? AND active = 1
ORDER BY created_ts DESC
LIMIT 1;

deactivateTeacherRates:
UPDATE TeacherHourlyRateEntity
SET active = 0
WHERE teacher_id = ? AND franchise_id = ?;

CREATE TABLE TeacherPaymentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    total_minutes INTEGER NOT NULL,
    rate_cents INTEGER NOT NULL,
    total_paid_cents INTEGER NOT NULL,
    period_label TEXT NOT NULL,
    paid_ts INTEGER NOT NULL,
    notes TEXT
);

insertTeacherPayment:
INSERT INTO TeacherPaymentEntity (teacher_id, franchise_id, total_minutes, rate_cents, total_paid_cents, period_label, paid_ts, notes)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

getPaymentsByTeacher:
SELECT * FROM TeacherPaymentEntity
WHERE teacher_id = ?
ORDER BY paid_ts DESC;

-- Administrativos / Franquiciatarios
CREATE TABLE AdministrativeEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE REFERENCES UserEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    phone TEXT,
    email TEXT,
    position TEXT NOT NULL,
    salary_cents INTEGER NOT NULL CHECK (salary_cents >= 0),
    start_ts INTEGER NOT NULL,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1)),
    address_id INTEGER REFERENCES AddressEntity(id)
);



administrativesByFranchise:
SELECT * FROM AdministrativeEntity WHERE franchise_id = ?;

administrativeCreate:
INSERT INTO AdministrativeEntity (user_id, franchise_id, first_name, last_name_paternal, last_name_maternal, phone, email, position, salary_cents, start_ts, active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

administrativeUpdate:
UPDATE AdministrativeEntity
SET user_id = ?, franchise_id = ?, first_name = ?, last_name_paternal = ?, last_name_maternal = ?, phone = ?, email = ?, position = ?, salary_cents = ?, start_ts = ?, active = ?
WHERE id = ?;

administrativeSelectById:
SELECT * FROM AdministrativeEntity WHERE id = ?;

-- ============= Familias =============

CREATE TABLE FamilyEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    responsible_adult_name TEXT NOT NULL,
    phone TEXT,
    email TEXT
);

familyCreate:
INSERT INTO FamilyEntity (responsible_adult_name, phone, email)
VALUES (?, ?, ?);

familySelectAll:
SELECT * FROM FamilyEntity;

familyDeleteById:
DELETE FROM FamilyEntity WHERE id = ?;

-- ============= Alumnos =============

CREATE TABLE StudentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE REFERENCES UserEntity(id) ON DELETE SET NULL,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT,
    birth_date_ts INTEGER,
    curp TEXT,
    phone TEXT,
    email TEXT,
    address_id INTEGER REFERENCES AddressEntity(id) ON DELETE SET NULL,
    active INTEGER NOT NULL DEFAULT 1 CHECK (active IN (0,1))
);

CREATE TABLE StudentFamilyEntity (
    student_id INTEGER NOT NULL REFERENCES StudentEntity(id) ON DELETE CASCADE,
    family_id INTEGER NOT NULL REFERENCES FamilyEntity(id) ON DELETE CASCADE,
    PRIMARY KEY (student_id, family_id)
);

assignStudentToFamily:
INSERT INTO StudentFamilyEntity (student_id, family_id)
VALUES (?, ?);

getFamilyByStudent:
SELECT f.*
FROM FamilyEntity f
JOIN StudentFamilyEntity sf ON sf.family_id = f.id
WHERE sf.student_id = ?;

getSiblingsByStudentId:
SELECT s.*
FROM StudentEntity s
JOIN StudentFamilyEntity sf ON sf.student_id = s.id
WHERE sf.family_id = (
    SELECT family_id FROM StudentFamilyEntity WHERE student_id = ?
)
AND s.id != ?;

CREATE TABLE StudentAuthorizedAdultEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL REFERENCES StudentEntity(id) ON DELETE CASCADE,
    first_name TEXT NOT NULL,
    last_name_paternal TEXT,
    last_name_maternal TEXT
);

authorizedAdultsByStudent:
SELECT * FROM StudentAuthorizedAdultEntity WHERE student_id = ?;

-- ============= Clases y Horarios =============

CREATE TABLE ClassroomEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    UNIQUE(franchise_id, name)
);

classroomCreate:
INSERT INTO ClassroomEntity (franchise_id, name) VALUES (?, ?);

classroomByFranchise:
SELECT * FROM ClassroomEntity WHERE franchise_id = ?;

CREATE TABLE ScheduleEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    classroom_id INTEGER NOT NULL REFERENCES ClassroomEntity(id) ON DELETE CASCADE,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    discipline_id INTEGER NOT NULL REFERENCES DisciplineEntity(id) ON DELETE RESTRICT,
    day_of_week INTEGER NOT NULL CHECK (day_of_week BETWEEN 0 AND 6),
    start_minutes INTEGER NOT NULL,
    end_minutes INTEGER NOT NULL
);

scheduleCreate:
INSERT INTO ScheduleEntity (franchise_id, classroom_id, teacher_id, discipline_id, day_of_week, start_minutes, end_minutes)
VALUES (?, ?, ?, ?, ?, ?, ?);

schedulesByFranchise:
SELECT * FROM ScheduleEntity WHERE franchise_id = ?;

CREATE TABLE StudentScheduleEntity (
    student_id INTEGER NOT NULL REFERENCES StudentEntity(id) ON DELETE CASCADE,
    schedule_id INTEGER NOT NULL REFERENCES ScheduleEntity(id) ON DELETE CASCADE,
    PRIMARY KEY (student_id, schedule_id)
);

studentSchedules:
SELECT s.*
FROM ScheduleEntity s
JOIN StudentScheduleEntity ss ON ss.schedule_id = s.id
WHERE ss.student_id = ?;

CREATE TABLE ClassAttendanceEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    schedule_id INTEGER NOT NULL REFERENCES ScheduleEntity(id) ON DELETE CASCADE,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    date_ts INTEGER NOT NULL,
    duration_minutes INTEGER NOT NULL,
    validated INTEGER NOT NULL DEFAULT 0 CHECK (validated IN (0,1))
);

insertClassAttendance:
INSERT INTO ClassAttendanceEntity (schedule_id, teacher_id, date_ts, duration_minutes, validated)
VALUES (?, ?, ?, ?, ?);

getAttendanceByTeacherAndPeriod:
SELECT * FROM ClassAttendanceEntity
WHERE teacher_id = ?
  AND date_ts BETWEEN ? AND ?;

-- ============= Inventario =============

CREATE TABLE BoutiqueItemEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    description TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    line TEXT,
    franchise_price_cents INTEGER NOT NULL DEFAULT 0,
    suggested_price_cents INTEGER NOT NULL DEFAULT 0,
    country TEXT
);

CREATE TABLE FranchiseBoutiqueInventoryEntity (
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    boutique_item_id INTEGER NOT NULL REFERENCES BoutiqueItemEntity(id) ON DELETE CASCADE,
    stock INTEGER NOT NULL DEFAULT 0,
    sale_price_cents INTEGER,
    PRIMARY KEY (franchise_id, boutique_item_id)
);

inventoryByFranchise:
SELECT fbi.*, bi.description, bi.code
FROM FranchiseBoutiqueInventoryEntity fbi
JOIN BoutiqueItemEntity bi ON bi.id = fbi.boutique_item_id
WHERE fbi.franchise_id = ?;

CREATE TABLE SnackItemEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    stock INTEGER NOT NULL DEFAULT 0,
    price_cents INTEGER NOT NULL
);

-- ============= Pagos y Promociones =============

CREATE TABLE MembershipEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    months_paid INTEGER NOT NULL,
    months_saved INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE PromotionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    start_ts INTEGER NOT NULL,
    end_ts INTEGER NOT NULL,
    discount_type TEXT NOT NULL CHECK (discount_type IN ('PERCENT','AMOUNT')),
    percent INTEGER,
    amount_cents INTEGER,
    franchise_id INTEGER REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    applicable_to_new INTEGER NOT NULL DEFAULT 0,
    applicable_to_active INTEGER NOT NULL DEFAULT 0
);

getBoutiqueItemByCode:
SELECT * FROM BoutiqueItemEntity WHERE code = ?;

boutiqueItemCreate:
INSERT INTO BoutiqueItemEntity (description, code, line, franchise_price_cents, suggested_price_cents, country)
VALUES (?, ?, ?, ?, ?, ?);

promotionCreate:
INSERT INTO PromotionEntity (name, start_ts, end_ts, discount_type, percent, amount_cents, franchise_id, applicable_to_new, applicable_to_active)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

CREATE TABLE InscriptionEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    price_cents INTEGER NOT NULL
);

CREATE TABLE PrecioBaseEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    precio_cents INTEGER NOT NULL
);

CREATE TABLE PaymentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL REFERENCES StudentEntity(id) ON DELETE CASCADE,
    amount_cents INTEGER NOT NULL,
    description TEXT NOT NULL,
    payment_ts INTEGER NOT NULL,
    base_amount_cents INTEGER NOT NULL,
    discount_cents INTEGER NOT NULL DEFAULT 0,
    membership_info TEXT,
    inscription_id INTEGER REFERENCES InscriptionEntity(id) ON DELETE SET NULL
);

-- ============= QUERIES FALTANTES =============

teacherSelectAll:
SELECT * FROM TeacherEntity;

teacherDelete:
DELETE FROM TeacherEntity WHERE id = ?;

studentDelete:
DELETE FROM StudentEntity WHERE id = ?;

administrativeSelectAll:
SELECT * FROM AdministrativeEntity;

administrativeDelete:
DELETE FROM AdministrativeEntity WHERE id = ?;

-- Crear inscripciÃ³n
inscriptionCreate:
INSERT INTO InscriptionEntity (price_cents) VALUES (?);

-- Actualizar inscripciÃ³n
inscriptionUpdate:
UPDATE InscriptionEntity SET price_cents = ? WHERE id = ?;

-- Obtener inscripciÃ³n por ID
inscriptionSelectById:
SELECT * FROM InscriptionEntity WHERE id = ?;

-- Crear membresÃ­a
membershipCreate:
INSERT INTO MembershipEntity (name, months_paid, months_saved) VALUES (?, ?, ?);

-- Actualizar membresÃ­a
membershipUpdate:
UPDATE MembershipEntity SET name = ?, months_paid = ?, months_saved = ? WHERE id = ?;

-- Obtener membresÃ­a por ID
membershipSelectById:
SELECT * FROM MembershipEntity WHERE id = ?;

getPaymentsByStudentId:
SELECT * FROM PaymentEntity WHERE student_id = ? ORDER BY payment_ts DESC;

-- Obtener todos los salones
classroomSelectAll:
SELECT * FROM ClassroomEntity;

-- Obtener salÃ³n por ID
classroomSelectById:
SELECT * FROM ClassroomEntity WHERE id = ?;

-- Actualizar salÃ³n
classroomUpdate:
UPDATE ClassroomEntity SET franchise_id = ?, name = ? WHERE id = ?;

-- Eliminar salÃ³n
classroomDelete:
DELETE FROM ClassroomEntity WHERE id = ?;

-- Crear precio base
precioBaseCreate:
INSERT INTO PrecioBaseEntity (precio_cents) VALUES (?);

-- Actualizar precio base
precioBaseUpdate:
UPDATE PrecioBaseEntity SET precio_cents = ? WHERE id = ?;

-- Obtener precio base por ID
precioBaseSelectById:
SELECT * FROM PrecioBaseEntity WHERE id = ?;

-- ============= Direcciones (AGREGAR) =============

addressCreate:
INSERT INTO AddressEntity (street, number, neighborhood, zip, city, state, country)
VALUES (?, ?, ?, ?, ?, ?, ?);

addressSelectById:
SELECT * FROM AddressEntity WHERE id = ?;

addressUpdate:
UPDATE AddressEntity SET street = ?, number = ?, neighborhood = ?, zip = ?, city = ?, state = ?, country = ? WHERE id = ?;

addressDelete:
DELETE FROM AddressEntity WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid();

-- ============= Eventos =============

CREATE TABLE EventEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    description TEXT,
    event_ts INTEGER NOT NULL,
    type TEXT NOT NULL,
    cost_cents INTEGER NOT NULL,
    tickets_available INTEGER NOT NULL
);

CREATE TABLE EventPaymentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL REFERENCES StudentEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    amount_cents INTEGER NOT NULL,
    payment_ts INTEGER NOT NULL,
    payment_type TEXT NOT NULL,
    event_id INTEGER REFERENCES EventEntity(id) ON DELETE SET NULL,
    reference TEXT
);

eventPaymentsByStudent:
SELECT * FROM EventPaymentEntity WHERE student_id = ? ORDER BY payment_ts DESC;

-- ============= Reportes y Pruebas =============

CREATE TABLE TeacherReportEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    teacher_id INTEGER NOT NULL REFERENCES TeacherEntity(id) ON DELETE CASCADE,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    report_type TEXT NOT NULL,
    report_ts INTEGER NOT NULL,
    observation TEXT
);

teacherReportsByTeacher:
SELECT * FROM TeacherReportEntity WHERE teacher_id = ?;

CREATE TABLE TrialClassEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    franchise_id INTEGER NOT NULL REFERENCES FranchiseEntity(id) ON DELETE CASCADE,
    student_id INTEGER REFERENCES StudentEntity(id) ON DELETE SET NULL,
    adult_first_name TEXT,
    adult_last_name_paternal TEXT,
    adult_last_name_maternal TEXT,
    phone TEXT,
    email TEXT,
    student_first_name TEXT NOT NULL,
    student_last_name_paternal TEXT,
    student_last_name_maternal TEXT,
    age_years INTEGER NOT NULL,
    age_months INTEGER NOT NULL,
    discipline_id INTEGER NOT NULL REFERENCES DisciplineEntity(id) ON DELETE RESTRICT,
    request_ts INTEGER NOT NULL,
    scheduled_ts INTEGER,
    classroom_id INTEGER,
    teacher_id INTEGER
);

levelSelectById:
SELECT * FROM LevelEntity WHERE id = ?;

-- PrecioBaseEntity
selectAllPrecioBase:
SELECT * FROM PrecioBaseEntity;

deletePrecioBase:
DELETE FROM PrecioBaseEntity WHERE id = ?;

-- InscriptionEntity
selectAllInscription:
SELECT * FROM InscriptionEntity;

deleteInscription:
DELETE FROM InscriptionEntity WHERE id = ?;

-- MembershipEntity
selectAllMembership:
SELECT * FROM MembershipEntity;

deleteMembership:
DELETE FROM MembershipEntity WHERE id = ?;

studentCount:
SELECT COUNT(*) FROM StudentEntity;

teacherCount:
SELECT COUNT(*) FROM TeacherEntity;

activeFranchisesCount:
SELECT COUNT(*) FROM FranchiseEntity WHERE active = 1;

selectAllStudents:
SELECT * FROM StudentEntity;

franchiseWithAddress:
SELECT
    f.*,
    a.street AS address_street,
    a.number AS address_number,
    a.neighborhood AS address_neighborhood,
    a.zip AS address_zip,
    a.city AS address_city,
    a.state AS address_state,
    a.country AS address_country
FROM FranchiseEntity f
LEFT JOIN AddressEntity a ON a.id = f.address_id;


trialClassesByFranchise:
SELECT * FROM TrialClassEntity WHERE franchise_id = ?;